@page "/blogview/{id:int}"
@using DataTransferObjects.BlogModels
@using Infrastructure.Services
@inject DataTransferObjects.BlogModels.BlogViewModel BlogViewModel
@inject DataTransferObjects.BlogModels.BlogListModel BlogModels
@inject Infrastructure.Services.BlogService BlogService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager nav


<div class="blog-pad">
    <div class="col-lg-12 blog-background rounded-lg shadow-border-sm">
        <p>
            <span class="blogTitle col-lg-12 text-center border-bottom border-dark">
                @BlogViewModel.blog.Title
            </span>
        </p>
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-3">
                <p>
                    <span class="blogHeader rounded">Posted on</span>
                    <span class="text-center blogData">@BlogViewModel.blog.SubmitDate.ToShortDateString()</span>
                </p>
                <p>
                    <span class="blogHeader rounded">Topic</span>
                    <a class="aLink text-center blogData blogLink" href="" @onclick='(e => BlogSearch("topic", BlogViewModel.blog.Topic))'>@BlogViewModel.blog.Topic</a>
                </p>
                <p>
                    <span class="blogHeader rounded">Tags</span>
                    @foreach (var tag in BlogViewModel.blog.Tags)
                    {
                        <a class="aLink text-center blogData blogLink" href="" @onclick='(e => BlogSearch("tag", tag.Name))'>@tag.Name</a>
                    }
                </p>
            </div>
            <div class="col-lg-9">
                <p>
                    @foreach (var photo in BlogViewModel.blog.Photos)
                    {
                        <img width="150" height="200" src="@photo.Link" class="column" />
                    }
                </p>
                <div class="col-lg-12">
                    <p>
                        <strong>
                            <pre class="preBlogBody">@((MarkupString)BlogViewModel.blog.Body)</pre>
                        </strong>

                    </p>
                </div>
            </div>
        </div>
        <div class="container-fluid">
            <span class="text-danger comment-message"><strong>@uploadError</strong></span>
            <span class="text-success comment-message"><strong>@uploadSuccess</strong></span>
            <EditForm Model="commentor" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="form-group border border-dark px-4 rounded shadow-border-sm">
                    <div class="form-group">
                        <label class="col-form-label">Name (  Optional - to personalize your comment )</label><ValidationMessage For="@(() => commentor.Name)" />
                        <InputText @bind-Value="commentor.Name" class="form-control shadow-border-xs" />
                    </div>
                    <div class="form-group">
                        <label class="col-form-label">Email ( Required - Just to make sure you're not a bot, we don't subscribe you unless you request subscription)</label><ValidationMessage For="(() => commentor.Email)" AdditionalAttributes='new Dictionary<string, object>() { { "class", "comment-message" } }' />
                        <InputText @bind-Value="commentor.Email" class="form-control shadow-border-xs" />
                    </div>
                    <div class="form-group">
                        <label class="col-form-label">Comment ( 500 character limit )</label><ValidationMessage For="(() => commentor.Body)" />
                        <InputTextArea @bind-Value="commentor.Body" class="form-control shadow-border-xs" />
                    </div>
                    <div class="form-group">
                        <InputCheckbox @bind-Value="commentor.Subscribe" /> Yes, I will subscribe to the Four Season Flora Newsletter. No need to select if you already receive it.
                    </div>
                    <div class="form-group">
                        <button class="btn btn-success form-control shadow-border-xs" @onclick="IsLiked" type="button">@likeUnlike</button>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary form-control shadow-border-xs" type="submit">Submit</button>
                        <span><strong>@saving</strong></span>
                    </div>
                </div>
            </EditForm>
            <span class="text-danger comment-message"><strong>@uploadError</strong></span>
            <span class="text-success comment-message"><strong>@uploadSuccess</strong></span>
        </div>
    </div>
</div>

<div class="row">

</div>

<jsnover.net.blazor.Components.Footer />

@code{
    private BlogCommentModel commentor = new BlogCommentModel();
    private EditContext editContext;
    private string uploadError = string.Empty;
    private string uploadSuccess = string.Empty;
    private string saving = string.Empty;
    private bool liked = false;
    private string likeUnlike = "Like";
    private bool viewed = false;
    private bool visit;

    [Parameter]
    public int id { get; set; }

    protected override void OnInitialized()
    {
        if(BlogViewModel.blog is null)
        {
            BlogViewModel.blog = new BlogDisplayModel() { Body = "Loading" };
        }
        editContext = new EditContext(commentor);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        visit = await sessionStorage.GetItemAsync<bool>("countedVisit");
        viewed = await sessionStorage.GetItemAsync<bool>("BlogViewCounted");
        var blogId = await sessionStorage.GetItemAsync<int>("ViewedBlogId");

        if (firstRender)
        {
            BlogViewModel.blog = await BlogService.GetBlog(id);

            this.StateHasChanged();
        }
        else
        {
            visit = await sessionStorage.GetItemAsync<bool>("countedVisit");
            viewed = await sessionStorage.GetItemAsync<bool>("BlogViewCounted");
        }

        // check if this blog has been viewed
        if (!viewed && blogId != BlogViewModel.blog.BlogId)
        {
            await sessionStorage.SetItemAsync("BlogViewCounted", true);
            await sessionStorage.SetItemAsync("ViewedBlogId", BlogViewModel.blog.BlogId);
            await BlogService.CountBlogView(BlogViewModel.blog.BlogId);
        }
        else if (viewed && blogId != BlogViewModel.blog.BlogId)
        {
            await sessionStorage.SetItemAsync("ViewedBlogId", BlogViewModel.blog.BlogId);
            await BlogService.CountBlogView(BlogViewModel.blog.BlogId);
        }

        if (!visit)
        {
            await sessionStorage.SetItemAsync("countedVisit", true);
            await BlogService.CountVisitor();
        }
    }

    private async Task HandleValidSubmit()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            saving = "Saving . . .";
            commentor.BlogId = BlogViewModel.blog.BlogId;
            commentor.Liked = liked;
            var uploaded = await BlogService.SubmitComment(commentor);
            if (uploaded)
            {
                await BlogService.NotifySnoverAboutComment(commentor, BlogViewModel.blog);
                saving = string.Empty;
                commentor = new BlogCommentModel();
                uploadError = string.Empty;
                uploadSuccess = "Your comment has been saved! Thank you for reaching out to us";
                this.StateHasChanged();
            }
            else
            {
                saving = string.Empty;
                uploadSuccess = string.Empty;
                uploadError = "There was an ERROR when saving, if problem continues contact site, or try again later. We greatly apologize and truly appreciate your time today";
                this.StateHasChanged();
            }

        }
    }

    private void IsLiked()
    {
        if (liked)
        {
            likeUnlike = "Like";
            liked = false;
        }
        else
        {
            likeUnlike = "Unlike";
            liked = true;
        }
    }

    private void BlogSearch(string type, string parameter)
    {
        nav.NavigateTo($"blogs/{type}/{parameter}");
    }
}
