@page "/writeblog"
@using DataTransferObjects.BlogModels
@using Infrastructure.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<h1 class="text-danger">@uploadError</h1>

<div class="container">

    <h3 class="font-weight-bold text-white">Let's Write A New Blog &#128578</h3>

    <EditForm Model="@blogModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="topic" class="text-light">Topic</label><ValidationMessage For="@(() => blogModel.Topic)" />
            <InputText class="form-control translucent-text-box shadow-border-xs" id="topic" @bind-Value="blogModel.Topic" />
        </div>
        <div class="form-group">
            <label for="title" class="text-light">Title</label><ValidationMessage For="@(() => blogModel.Title)" />
            <InputText class="form-control translucent-text-box shadow-border-xs" id="title" @bind-Value="blogModel.Title" />
        </div>
        <div class="form-group">
            <label for="tags" class="text-light">Tags Ex: one, two, three</label><ValidationMessage For="@(() => blogModel.Tags)" />
            <InputText class="form-control translucent-text-box shadow-border-xs" id="tags" @bind-Value="blogModel.Tags" />
        </div>
        <div class="form-group">
            <label for="body" class="text-light">Photos - Can add up to 4 photos</label><ValidationMessage For="@(() => blogModel.Photos)" />
            <InputText class="form-control translucent-text-box shadow-border-xs" @bind-Value="newPhoto" />
            <button class="btn btn-success form-control translucent-text-box shadow-border-sm" @onclick="NewPhoto" @onclick:preventDefault>Add Pic</button>
        </div>
        <div class="row">
            @for (int i = 0; i < photos.Count; i++)
            {
                var buttNum = @i;
                <div class="col-lg-3">
                    <img width="150" height="200" src="@photos[i]" /><br />
                    <button class="btn-danger shadow-border-sm" width="150" height="20" name="butt" @onclick="@(e => RemovePhoto(buttNum))" @onclick:preventDefault>Remove</button>
                </div>
            }
        </div>
        <div class="form-group">
            <ValidationMessage For="@(() => blogModel.Body)" />
            @if (EditorEnabled)
            {
                <div id="toolbar" class="form-control shadow-border-xs">
                    <span class="ql-formats">
                        <select class="ql-font">
                            <option selected=""></option>
                            <option value="serif"></option>
                            <option value="monospace"></option>
                        </select>
                        <select class="ql-size">
                            <option value="small"></option>
                            <option selected=""></option>
                            <option value="large"></option>
                            <option value="huge"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                        <button class="ql-indent" value="-1"></button>
                        <button class="ql-indent" value="+1"></button>
                        <select class="ql-align">
                            <option selected=""></option>
                            <option value="center"></option>
                            <option value="right"></option>
                            <option value="justify"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </div>
            }
            <div @ref="@divEditorElement" class="textarea form-control translucent-text-box shadow-border-xs" style="height:400px" />
        </div>
        <div class="form-group">
            <button class="btn btn-success form-control shadow-border-sm" @onclick="IsPublished" type="button">@publishUnPublish</button>
        </div>
        <div class="form-group">
            <button class="btn btn-primary form-control shadow-border-sm" type="submit">Submit</button>
        </div>

    </EditForm>

    <h1 class="text-danger">@uploadError</h1>
</div>

<jsnover.net.blazor.Components.Footer />

@code {
    private NewBlogModel blogModel = new NewBlogModel();
    private EditContext editContext;
    private string blogPreview;
    private string uploadError;
    private string newPhoto;
    private bool published = false;
    private string publishUnPublish = "Publish";
    private List<string> photos = new List<string>();
    private ElementReference divEditorElement;
    private bool EditorEnabled = true;

    async Task GetHTML()
    {
        blogModel.Body = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillHTML", divEditorElement);
    }

    async Task insertEditorText()
    {
        var QuillDelta = await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.insertText", divEditorElement, "Hello world");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);

        }

        if (blogModel.Body is "Empty")
        {

            await insertEditorText();
        }
    }

    private void IsPublished()
    {
        if (published)
        {
            publishUnPublish = "Publish";
            published = false;
        }
        else
        {
            publishUnPublish = "Un-Publish";
            published = true;
        }
    }

    private void NewPhoto()
    {
        if (photos.Count < 4)
        {
            photos.Add(newPhoto);
            this.StateHasChanged();
        }
    }

    private void RemovePhoto(int index)
    {
        photos.RemoveAt(index);
        this.StateHasChanged();
    }

    private void UpdatePreview()
    {
        blogPreview = blogModel.Body?.Replace("\n", "<br />");
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(blogModel);
    }

    private async Task HandleValidSubmit()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            await GetHTML();
            blogModel.Photos = photos;
            blogModel.Published = published;
            var uploaded = await BlogService.SubmitBlog(blogModel);
            if (uploaded)
            {
                NavigationManager.NavigateTo("");
            }
            else
            {
                uploadError = "There was an ERROR when uploading, save your text before closing the page.";
                this.StateHasChanged();
            }

        }
    }
}
