@inherits LayoutComponentBase
@inject NavigationManager nav
@using DataTransferObjects.BlogModels
@using Infrastructure.Services

<div class="sidebar">
    <NavMenu />
</div>

<div class="main background-image">
    <div class="top-row auth top-bar shadow-border-sm">
        <EditForm Model="@subscribeModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div>
                <span class="text-danger comment-message"><strong>@uploadError</strong></span>
                <input type="email" @bind="subscribeModel.Email" placeholder="Email for Newsletter" class="rounded shadow-border-xs" />
                <input type="submit" value="Subscribe" class="btn btn-primary shadow-border-sm" />
            </div>
            <span class="text-white">@subscribed</span>
        </EditForm>

        <LoginDisplay />
    </div>

    <div class="content px-4">
        @Body
    </div>
</div>

@code{
    private SubscribeModel subscribeModel = new SubscribeModel();
    private string subscribed { get; set; }
    private string uploadError = string.Empty;
    private EditContext editContext;

    private async Task<bool> AddSubscriber()
    {
        var hasSubscribed = await BlogService.AddSubscriber(subscribeModel.Email);
        if (hasSubscribed)
        {
            subscribed = "Thank you for subscribing!";
            this.StateHasChanged();
        }
        return hasSubscribed;
    }

    private async Task HandleValidSubmit()
    {
        editContext = new EditContext(subscribeModel);
        var isValid = editContext.Validate();
        var isValidEmail = RegexUtilities.IsValidEmail(subscribeModel.Email);

        if (isValid && isValidEmail)
        {
            var uploaded = await AddSubscriber();
            if (uploaded)
            {
                nav.NavigateTo("");
            }
            else
            {
                uploadError = "There was an ERROR when uploading, save your text before closing the page.";
                this.StateHasChanged();
            }

        }
    }
}
