@using jsnover.net.blazor.Models
@using Constants.Game


<div class="rounded shadow-border p-5 GameBoard">
    <div class="col-12 row">
        <div class="col-4">
            <div class="row pad-20">
                <button class="btn btn-primary" @onclick='(async() => await Actions("hit"))'>
                    Hit
                </button>
                <button class="btn btn-primary" @onclick='(async() => await Actions("stand"))'>
                    Stand
                </button>
                <button class="btn btn-danger" @onclick='(async() => await Actions("surrender"))'>
                    Surrender
                </button>
            </div>
            <div class="row pad-20">
                <button class="btn btn-primary" @onclick='(async() => await Actions("double"))'>
                    Double
                </button>
                <button class="btn btn-primary" @onclick='(async() => await Actions("split"))'>
                    Split
                </button>
                <button class="btn btn-danger" @onclick='(async() => await Actions("deal"))'>
                    Deal
                </button>
            </div>
        </div>
        <div class="col-8">
            <div class="col-12 row pad-20">
                <div class="col" style="height:20vh">
                    <img height="100%" width="15%" style="position:absolute;z-index:0;left:20%;" src="@SolitaireImages.BacokOfCard" />
                    <img height="100%" width="15%" style="position:absolute;z-index:1;left:25%;" src="@SolitaireImages.BacokOfCard" />
                </div>
            </div>
            <div class="col-12 row pad-20">
                <div class="col" style="height:20vh">
                    <img height="100%" width="15%" style="position:absolute;z-index:0;left:20%;" src="@SolitaireImages.BacokOfCard" />
                    <img height="100%" width="15%" style="position:absolute;z-index:1;left:25%;" src="@SolitaireImages.BacokOfCard" />
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public Dictionary<string, List<Card>> Decks { get; set; } // indexes Deck, Player, Dealer, DiscardPile

    protected override async Task OnParametersSetAsync()
    {
        Decks["Player"] = await DrawCards("Deck", 2);
        Decks["Dealer"] = await DrawCards("Deck", 2);
    }

    //draw cards
    public async Task<List<Card>> DrawCards(string deckId, int count)
    {
        // draw cards from deck
        var cards = new List<Card>();
        var deck = Decks[deckId];
        for (int i = 0; i < count; i++)
        {
            cards.Add(deck[deck.Count - 1]);
            deck.RemoveAt(deck.Count - 1);
        }

        return cards;
    }

    //actions
    public async Task Actions(string action)
    {
        
        switch (action)
        {
            case "hit":
                Console.WriteLine(action);
                break;
            case "stand":
                Console.WriteLine(action);
                break;
            case "surrender":
                Console.WriteLine(action);
                break;
            case "double":
                Console.WriteLine(action);
                break;
            case "split":
                Console.WriteLine(action);
                break;
            case "deal":
                Console.WriteLine(action);
                break;
            default:
                Console.WriteLine(action);
                break;
        }
    }
}
