@page "/contact"
@using Microsoft.Extensions.Logging
@inject ILogger<jsnover.net.blazor.DataTransferObjects.Common.ContactModel> log


<div class="pad-25x3">
    <div class="col-lg-12 jsno-background rounded-lg shadow-border">
        <p>
            <h3>Please reach out if you need to contact us to say hello, or for support. &#128578</h3>
        </p>
        <p>
            <h3>
                If you are an advertiser, or a sponsor and would like to reach out for a possible business venture,
                please click the "Business" button before submitting your message to us.
            </h3>
        </p>
        <p>
            <h3>
                If you have an issue with the website, please click the "Issue" button before submitting. Thank you for your help
                with improving our website.
            </h3>
        </p>

        <div class="container-fluid">
            <EditForm Model="contactRequest" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <span class="text-danger comment-message"><strong>@uploadError</strong></span>
                <span class="text-success comment-message"><strong>@uploadSuccess</strong></span>

                <div class="form-group border border-dark px-4">
                    <div class="form-group">
                        <label class="col-form-label">Name (  Optional  )</label><ValidationMessage For="@(() => contactRequest.Name)" />
                        <InputText @bind-Value="contactRequest.Name" class="form-control shadow-border-sm" />
                    </div>
                    <div class="form-group">
                        <label class="col-form-label">Email ( Required )</label><ValidationMessage For="(() => contactRequest.Email)" AdditionalAttributes='new Dictionary<string, object>() { { "class", "comment-message" } }' />
                        <InputText @bind-Value="contactRequest.Email" class="form-control shadow-border-sm" />
                    </div>
                    <div class="form-group">
                        <label class="col-form-label">Comment ( 500 character limit )</label><ValidationMessage For="(() => contactRequest.Body)" />
                        <InputTextArea @bind-Value="contactRequest.Body" class="form-control shadow-border-sm" />
                    </div>
                    <div class="form-group">
                        <button class="btn btn-info form-control shadow-border-sm" @onclick="IsBusiness" type="button">@business</button>

                        <span class="form-group" hidden="@(!isBusiness)">
                            <label class="col-form-label">Comapny Name</label><ValidationMessage For="@(() => contactRequest.CompanyName)" />
                            <InputText @bind-Value="contactRequest.CompanyName" class="form-control shadow-border-sm" />
                        </span>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-warning form-control shadow-border-sm" @onclick="IsIssue" type="button">@issue</button>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary form-control shadow-border-sm" type="submit">Submit</button>
                        <span><strong>@saving</strong></span>
                    </div>
                </div>
                <span class="text-danger comment-message"><strong>@uploadError</strong></span>
                <span class="text-success comment-message"><strong>@uploadSuccess</strong></span>
            </EditForm>            
        </div>
    </div>
</div>



@code{
    private DataTransferObjects.Common.ContactModel contactRequest = new DataTransferObjects.Common.ContactModel();
    private EditContext editContext;
    private string uploadError = string.Empty;
    private string uploadSuccess = string.Empty;
    private string saving = string.Empty;
    private bool isIssue = false;
    private string issue = "Issue";
    private bool isBusiness = false;
    private string business = "Business";


    protected override void OnInitialized()
    {
        editContext = new EditContext(contactRequest);
    }

    private async Task HandleValidSubmit()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            saving = "Saving . . .";
            contactRequest.Issue = isIssue;
            contactRequest.Business = isBusiness;
            var uploaded = await Infrastructure.Services.Submit.SubmitContactRequest(contactRequest);
            if (uploaded)
            {
                saving = string.Empty;
                contactRequest = new DataTransferObjects.Common.ContactModel();
                uploadError = string.Empty;
                uploadSuccess = "It has been saved! Thank you for reaching out to us";
                this.StateHasChanged();
            }
            else
            {
                log.LogError("There was an ERROR when saving contact request");
                saving = string.Empty;
                uploadSuccess = string.Empty;
                uploadError = "There was an ERROR when saving, if problem continues please try again later. We greatly apologize and truly appreciate your time today";
                this.StateHasChanged();
            }

        }
    }

    private void IsIssue()
    {
        if (isIssue)
        {
            issue = "Issue";
            isIssue = false;
        }
        else
        {
            issue = "Non Issue";
            isIssue = true;
        }
    }

    private void IsBusiness()
    {
        if (isBusiness)
        {
            business = "Business";
            isBusiness = false;
        }
        else
        {
            business = "Non Business";
            isBusiness = true;
        }
    }
}
